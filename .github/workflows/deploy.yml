name: Deploy to Cloudflare

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_KEY: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
        
    - name: Run linting
      run: |
        npm run lint
        
    - name: Run tests
      run: |
        npm run test
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Build backend
      run: |
        cd server
        npm run build

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
        
    - name: Setup Cloudflare CLI
      uses: cloudflare/setup-wrangler@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Configure environment variables
      run: |
        cd client
        echo "REACT_APP_API_URL=https://pos-backend-staging.your-subdomain.workers.dev" > .env.production
        echo "REACT_APP_ENVIRONMENT=staging" >> .env.production
        echo "REACT_APP_VERSION=${{ github.sha }}" >> .env.production
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Deploy backend to staging
      run: |
        cd server
        wrangler deploy --env staging
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Deploy frontend to staging
      run: |
        cd client
        wrangler pages deploy build --project-name=pos-frontend --branch=staging
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Test staging deployment
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f https://pos-backend-staging.your-subdomain.workers.dev/api/health || exit 1
        
    - name: Comment PR with staging URLs
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## ðŸš€ Staging Deployment Complete!
          
          **Frontend:** https://pos-frontend-staging.pages.dev
          **Backend:** https://pos-backend-staging.your-subdomain.workers.dev
          
          Please test the staging environment and approve the PR when ready.`
          })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        cd ../server && npm ci
        
    - name: Setup Cloudflare CLI
      uses: cloudflare/setup-wrangler@v3
      with:
        apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Configure environment variables
      run: |
        cd client
        echo "REACT_APP_API_URL=https://pos-backend.your-subdomain.workers.dev" > .env.production
        echo "REACT_APP_ENVIRONMENT=production" >> .env.production
        echo "REACT_APP_VERSION=${{ github.sha }}" >> .env.production
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Run database migrations
      run: |
        cd server
        wrangler d1 migrations apply pos-database
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Deploy backend to production
      run: |
        cd server
        wrangler deploy
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Deploy frontend to production
      run: |
        cd client
        wrangler pages deploy build --project-name=pos-frontend
      env:
        CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        
    - name: Test production deployment
      run: |
        sleep 30  # Wait for deployment to complete
        curl -f https://pos-backend.your-subdomain.workers.dev/api/health || exit 1
        
    - name: Create deployment tag
      run: |
        git tag -a "v${{ github.run_number }}" -m "Production deployment ${{ github.run_number }}"
        git push origin "v${{ github.run_number }}"
        
    - name: Notify deployment success
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createRelease({
            tag_name: `v${{ github.run_number }}`,
            name: `Production Deployment v${{ github.run_number }}`,
            body: `## ðŸŽ‰ Production Deployment Complete!
          
          **Frontend:** https://pos-frontend.pages.dev
          **Backend:** https://pos-backend.your-subdomain.workers.dev
          
          **Changes in this deployment:**
          ${{ github.event.head_commit.message }}
          
          **Commit:** ${{ github.sha }}
          **Deployed by:** ${{ github.actor }}
          **Deployed at:** ${{ github.event.head_commit.timestamp }}`,
            draft: false,
            prerelease: false
          })

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd client && npm audit --audit-level=moderate
        cd ../server && npm audit --audit-level=moderate
        
    - name: Run dependency check
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate

  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://pos-frontend.pages.dev
          https://pos-backend.your-subdomain.workers.dev/api/health
        uploadArtifacts: true
        temporaryPublicStorage: true 