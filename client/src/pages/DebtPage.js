import React, { useState, useEffect } from 'react';
import { message } from 'antd';
import {
  Card,
  Table,
  Button,
  Modal,
  Input,
  Select,
  DatePicker,
  Space,
  Tag,
  Row,
  Col,
  Statistic,
  Tabs,
  InputNumber,
  Alert,
  Badge,
  Typography,
  Form,
} from 'antd';
import {
  PlusOutlined,
  UserOutlined,
  ShopOutlined,
  DollarOutlined,
  ExclamationCircleOutlined,
  CheckCircleOutlined,
  CreditCardOutlined,
  WalletOutlined,
} from '@ant-design/icons';
import { customersAPI, suppliersAPI, financialAPI } from '../services/api';
import dayjs from 'dayjs';
import DebtPaymentModal from '../components/DebtPaymentModal';
import { toast } from 'sonner';

const { Option } = Select;
const { TabPane } = Tabs;
const { Text } = Typography;

const DebtPage = () => {
  const [customerDebts, setCustomerDebts] = useState([]);
  const [supplierDebts, setSupplierDebts] = useState([]);
  const [customers, setCustomers] = useState([]);
  const [suppliers, setSuppliers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [activeTab, setActiveTab] = useState('customers');
  const [modalType, setModalType] = useState('payment'); // 'payment' or 'debt'
  const [submitting, setSubmitting] = useState(false);
  const [debtStats, setDebtStats] = useState({
    totalCustomerDebt: 0,
    totalSupplierDebt: 0,
    overduCustomerDebt: 0,
    overdueSupplierDebt: 0,
  });
  const [supplierTransactions, setSupplierTransactions] = useState([]);
  const [customerTransactions, setCustomerTransactions] = useState([]);

  // üÜï Ant Design Form instance
  const [form] = Form.useForm();

  const paymentMethods = [
    { value: 'cash', label: 'Ti·ªÅn m·∫∑t', icon: <DollarOutlined /> },
    { value: 'card', label: 'Th·∫ª', icon: <CreditCardOutlined /> },
    { value: 'transfer', label: 'Chuy·ªÉn kho·∫£n', icon: <WalletOutlined /> },
    { value: 'ewallet', label: 'V√≠ ƒëi·ªán t·ª≠', icon: <WalletOutlined /> },
  ];

  useEffect(() => {
    console.log('üöÄ DebtPage mounted, fetching data...');
    fetchData();
  }, []);

  useEffect(() => {
    console.log('üîÑ Customers state updated:', customers);
  }, [customers]);

  useEffect(() => {
    console.log('üîÑ Suppliers state updated:', suppliers);
  }, [suppliers]);

  // Process debts when customers/suppliers data changes
  useEffect(() => {
    if (customers.length > 0) {
      fetchCustomerDebts();
    }
  }, [customers]); // eslint-disable-line react-hooks/exhaustive-deps

  useEffect(() => {
    if (suppliers.length > 0) {
      fetchSupplierDebts();
    }
  }, [suppliers]); // eslint-disable-line react-hooks/exhaustive-deps

  // Fetch supplier transactions for history
  useEffect(() => {
    if (activeTab === 'suppliers') {
      fetchSupplierTransactions();
    }
  }, [activeTab]);

  // Fetch customer transactions for history
  useEffect(() => {
    if (activeTab === 'customers') {
      fetchCustomerTransactions();
    }
  }, [activeTab]);

  const fetchData = async () => {
    setLoading(true);
    try {
      // First fetch all customers and suppliers
      await Promise.all([
        fetchCustomers(),
        fetchSuppliers(),
      ]);
      
      // Then process debts (this will be done in useEffect when customers/suppliers change)
    } catch (error) {
      message.error('L·ªói khi t·∫£i d·ªØ li·ªáu');
    } finally {
      setLoading(false);
    }
  };

  const fetchCustomerDebts = async () => {
    try {
      // Use customers data that's already fetched and enhanced
      const customersWithDebt = customers.filter(c => (c.current_debt || 0) > 0);
      setCustomerDebts(customersWithDebt);
      
      // Calculate debt stats
      const totalDebt = customersWithDebt.reduce((sum, c) => sum + (c.current_debt || 0), 0);
      setDebtStats(prev => ({ ...prev, totalCustomerDebt: totalDebt }));
    } catch (error) {
      console.error('Error processing customer debts:', error);
      setCustomerDebts([]);
    }
  };

  const fetchSupplierDebts = async () => {
    try {
      // Use suppliers data that's already fetched and enhanced
      const suppliersWithDebt = suppliers.filter(s => (s.current_debt || 0) > 0);
      setSupplierDebts(suppliersWithDebt);
      
      // Calculate debt stats
      const totalDebt = suppliersWithDebt.reduce((sum, s) => sum + (s.current_debt || 0), 0);
      setDebtStats(prev => ({ ...prev, totalSupplierDebt: totalDebt }));
    } catch (error) {
      console.error('Error processing supplier debts:', error);
      setSupplierDebts([]);
    }
  };

  const fetchSupplierTransactions = async () => {
    try {
      const response = await financialAPI.getTransactions({ type: 'expense', category: 'Tr·∫£ n·ª£ nh√† cung c·∫•p', limit: 10 });
      if (response.data.success) {
        setSupplierTransactions(response.data.data || []);
      } else {
        setSupplierTransactions([]);
      }
    } catch (error) {
      setSupplierTransactions([]);
    }
  };

  const fetchCustomerTransactions = async () => {
    try {
      const response = await financialAPI.getTransactions({ type: 'income', category: 'Thu n·ª£ kh√°ch h√†ng', limit: 10 });
      if (response.data.success) {
        setCustomerTransactions(response.data.data || []);
      } else {
        setCustomerTransactions([]);
      }
    } catch (error) {
      setCustomerTransactions([]);
    }
  };

  const fetchCustomers = async () => {
    try {
      const response = await customersAPI.getAll();
      console.log('üë• Raw customers response:', response.data);
      
      if (response.data.success) {
        // Kh√¥ng c√≤n mock, ch·ªâ l·∫•y s·ªë n·ª£ th·∫≠t t·ª´ API
        const customersWithDebt = response.data.data.map(customer => ({
          ...customer,
          current_debt: customer.current_debt || 0,
          total_spent: customer.total_spent || 0
        }));
        
        console.log('üí∞ Customers with debt:', customersWithDebt);
        console.log('üìä Total customers for dropdown:', customersWithDebt.length);
        setCustomers(customersWithDebt);
      }
    } catch (error) {
      console.error('Error fetching customers:', error);
      // Fallback: Set empty array to avoid crashes
      setCustomers([]);
    }
  };

  const fetchSuppliers = async () => {
    try {
      const response = await suppliersAPI.getAll();
      console.log('üè≠ Raw suppliers response:', response.data);
      
      if (response.data.success) {
        // Kh√¥ng c√≤n mock, ch·ªâ l·∫•y s·ªë n·ª£ th·∫≠t t·ª´ API
        const suppliersWithDebt = response.data.data.map(supplier => ({
          ...supplier,
          current_debt: supplier.current_debt || 0,
          total_purchases: supplier.total_purchases || 0
        }));
        
        console.log('üí∞ Suppliers with debt:', suppliersWithDebt);
        console.log('üìä Total suppliers for dropdown:', suppliersWithDebt.length);
        setSuppliers(suppliersWithDebt);
      }
    } catch (error) {
      console.error('Error fetching suppliers:', error);
      // Fallback: Set empty array to avoid crashes
      setSuppliers([]);
    }
  };

  // üÜï Enhanced form submission with proper error handling
  const handlePayDebt = async (values) => {
    try {
      setSubmitting(true);
      console.log('üí∞ Submitting payment data:', values);
      
      const transactionData = {
        type: activeTab === 'customers' ? 'income' : 'expense',
        category: activeTab === 'customers' ? 'Thu n·ª£ kh√°ch h√†ng' : 'Tr·∫£ n·ª£ nh√† cung c·∫•p',
        amount: values.amount,
        description: values.description || `Thanh to√°n n·ª£ ${activeTab === 'customers' ? 'kh√°ch h√†ng' : 'nh√† cung c·∫•p'}`,
        customer_id: activeTab === 'customers' ? values.entity_id : null,
        supplier_id: activeTab === 'suppliers' ? values.entity_id : null,
        payment_method: values.payment_method,
        transaction_date: values.transaction_date?.toISOString() || new Date().toISOString(),
        user_id: 1,
      };

      console.log('üì§ Transaction data to send:', transactionData);

      const response = await financialAPI.create(transactionData);
      if (response.data.success) {
        toast.success('Ghi nh·∫≠n thanh to√°n th√†nh c√¥ng!');
        setModalVisible(false);
        form.resetFields();
        fetchData();
      } else {
        throw new Error(response.data.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
      }
    } catch (error) {
      console.error('‚ùå Payment submission error:', error);
      toast.error(error.message || 'L·ªói khi ghi nh·∫≠n thanh to√°n');
    } finally {
      setSubmitting(false);
    }
  };

  // üÜï Enhanced modal close handler
  const handleModalClose = () => {
    setModalVisible(false);
    form.resetFields();
    setSubmitting(false);
  };

  const customerColumns = [
    {
      title: 'M√£ KH',
      dataIndex: 'code',
      key: 'code',
      width: 100,
    },
    {
      title: 'T√™n kh√°ch h√†ng',
      dataIndex: 'name',
      key: 'name',
      render: (name, record) => (
        <div>
          <div>{name}</div>
          {record.phone && (
            <Text type="secondary" style={{ fontSize: 12 }}>
              {record.phone}
            </Text>
          )}
        </div>
      ),
    },
    {
      title: 'Lo·∫°i KH',
      dataIndex: 'customer_type',
      key: 'customer_type',
      render: (type) => {
        const colors = {
          regular: 'default',
          vip: 'gold',
          wholesale: 'blue',
        };
        const labels = {
          regular: 'Th∆∞·ªùng',
          vip: 'VIP',
          wholesale: 'S·ªâ',
        };
        return <Tag color={colors[type]}>{labels[type]}</Tag>;
      },
    },
    {
      title: 'S·ªë n·ª£',
      dataIndex: 'current_debt',
      key: 'current_debt',
      render: (debt) => (
        <Text strong style={{ color: debt > 0 ? '#ff4d4f' : '#52c41a' }}>
          {debt.toLocaleString('vi-VN')} ‚Ç´
        </Text>
      ),
      sorter: (a, b) => a.current_debt - b.current_debt,
    },
    {
      title: 'T·ªïng chi ti√™u',
      dataIndex: 'total_spent',
      key: 'total_spent',
      render: (spent) => (
        <Text type="secondary">
          {spent ? spent.toLocaleString('vi-VN') : 0} ‚Ç´
        </Text>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i',
      key: 'status',
      render: (_, record) => {
        const debt = record.current_debt || 0;
        if (debt === 0) {
          return <Badge status="success" text="ƒê√£ thanh to√°n" />;
        } else if (debt > 1000000) {
          return <Badge status="error" text="N·ª£ l·ªõn" />;
        } else {
          return <Badge status="warning" text="C√≥ n·ª£" />;
        }
      },
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button
            type="primary"
            size="small"
            icon={<DollarOutlined />}
            onClick={() => {
              setModalType('payment');
              setActiveTab('customers');
              setModalVisible(true);
              // üÜï Set form values v·ªõi Ant Design Form
              form.setFieldsValue({
                entity_id: record.id,
                payment_method: 'cash',
                transaction_date: dayjs(),
                amount: record.current_debt || 0,
                description: `Thanh to√°n n·ª£ kh√°ch h√†ng ${record.name}`
              });
            }}
          >
            Thanh to√°n
          </Button>
        </Space>
      ),
    },
  ];

  const supplierColumns = [
    {
      title: 'M√£ NCC',
      dataIndex: 'code',
      key: 'code',
      width: 100,
    },
    {
      title: 'T√™n nh√† cung c·∫•p',
      dataIndex: 'name',
      key: 'name',
      render: (name, record) => (
        <div>
          <div>{name}</div>
          {record.phone && (
            <Text type="secondary" style={{ fontSize: 12 }}>
              {record.phone}
            </Text>
          )}
        </div>
      ),
    },
    {
      title: 'ƒê·ªãa ch·ªâ',
      dataIndex: 'address',
      key: 'address',
      ellipsis: true,
    },
    {
      title: 'S·ªë n·ª£',
      dataIndex: 'current_debt',
      key: 'current_debt',
      render: (debt) => (
        <Text strong style={{ color: debt > 0 ? '#ff4d4f' : '#52c41a' }}>
          {(debt || 0).toLocaleString('vi-VN')} ‚Ç´
        </Text>
      ),
      sorter: (a, b) => (a.current_debt || 0) - (b.current_debt || 0),
    },
    {
      title: 'T·ªïng mua h√†ng',
      dataIndex: 'total_purchases',
      key: 'total_purchases',
      render: (purchases) => (
        <Text type="secondary">
          {(purchases || 0).toLocaleString('vi-VN')} ‚Ç´
        </Text>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i',
      key: 'status',
      render: (_, record) => {
        const debt = record.current_debt || 0;
        if (debt === 0) {
          return <Badge status="success" text="ƒê√£ thanh to√°n" />;
        } else if (debt > 1000000) {
          return <Badge status="error" text="N·ª£ l·ªõn" />;
        } else {
          return <Badge status="warning" text="C√≥ n·ª£" />;
        }
      },
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      render: (_, record) => (
        <Space>
          <Button
            type="primary"
            size="small"
            icon={<DollarOutlined />}
            onClick={() => {
              setModalType('payment');
              setActiveTab('suppliers');
              setModalVisible(true);
              form.setFieldsValue({
                entity_id: record.id,
                payment_method: 'cash',
                transaction_date: dayjs(),
                amount: record.current_debt || 0,
                description: `Thanh to√°n n·ª£ nh√† cung c·∫•p ${record.name}`
              });
            }}
          >
            Thanh to√°n
          </Button>
        </Space>
      ),
    },
  ];

  const supplierHistoryColumns = [
    {
      title: 'Ng√†y',
      dataIndex: 'transaction_date',
      key: 'transaction_date',
      render: (date) => dayjs(date).format('DD/MM/YYYY'),
      width: 100,
    },
    {
      title: 'Nh√† cung c·∫•p',
      dataIndex: 'supplier_name',
      key: 'supplier_name',
      render: (name) => name || 'Kh√¥ng x√°c ƒë·ªãnh',
    },
    {
      title: 'S·ªë ti·ªÅn',
      dataIndex: 'amount',
      key: 'amount',
      render: (amount) => <span style={{ color: '#cf1322', fontWeight: 500 }}>- {(amount || 0).toLocaleString('vi-VN')} ‚Ç´</span>,
      width: 120,
    },
    {
      title: 'M√¥ t·∫£',
      dataIndex: 'description',
      key: 'description',
      render: (desc) => desc || 'Tr·∫£ n·ª£ nh√† cung c·∫•p',
    },
  ];

  const customerHistoryColumns = [
    {
      title: 'Ng√†y',
      dataIndex: 'transaction_date',
      key: 'transaction_date',
      render: (date) => dayjs(date).format('DD/MM/YYYY'),
      width: 100,
    },
    {
      title: 'Kh√°ch h√†ng',
      dataIndex: 'customer_name',
      key: 'customer_name',
      render: (name) => name || 'Kh√¥ng x√°c ƒë·ªãnh',
    },
    {
      title: 'S·ªë ti·ªÅn',
      dataIndex: 'amount',
      key: 'amount',
      render: (amount) => <span style={{ color: '#52c41a', fontWeight: 500 }}>+ {(amount || 0).toLocaleString('vi-VN')} ‚Ç´</span>,
      width: 120,
    },
    {
      title: 'M√¥ t·∫£',
      dataIndex: 'description',
      key: 'description',
      render: (desc) => desc || 'Thu n·ª£ kh√°ch h√†ng',
    },
  ];

  const renderDebtSummary = () => {
    return (
      <Row gutter={16} style={{ marginBottom: 24 }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng kh√°ch h√†ng n·ª£"
              value={customerDebts.length}
              valueStyle={{ color: '#52c41a' }}
              prefix={<UserOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng n·ª£ nh√† cung c·∫•p"
              value={debtStats.totalSupplierDebt}
              precision={0}
              valueStyle={{ color: '#cf1322' }}
              prefix={<ShopOutlined />}
              suffix="‚Ç´"
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng n·ª£ ph·∫£i thu"
              value={debtStats.totalCustomerDebt + debtStats.totalSupplierDebt}
              precision={0}
              valueStyle={{ color: '#1890ff' }}
              prefix={<DollarOutlined />}
              suffix="‚Ç´"
            />
          </Card>
        </Col>
      </Row>
    );
  };

  return (
    <div style={{ padding: 24 }}>
      {renderDebtSummary()}

      <Alert
        message="Qu·∫£n l√Ω n·ª£"
        description="Theo d√µi v√† qu·∫£n l√Ω c√°c kho·∫£n n·ª£ c·ªßa kh√°ch h√†ng v√† nh√† cung c·∫•p. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t s·ªë d∆∞ n·ª£ khi c√≥ giao d·ªãch thanh to√°n."
        type="info"
        showIcon
        style={{ marginBottom: 24 }}
      />

      <Tabs activeKey={activeTab} onChange={setActiveTab}>
        <TabPane
          tab={
            <span>
              <UserOutlined />
              Kh√°ch h√†ng n·ª£ ({customerDebts.length})
            </span>
          }
          key="customers"
        >
          <Row gutter={24}>
            <Col span={15}>
              <Card
                title="Danh s√°ch kh√°ch h√†ng c√≥ n·ª£"
                extra={
                  <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={() => {
                      setModalType('payment');
                      setActiveTab('customers');
                      setModalVisible(true);
                      // üÜï Reset form v·ªõi values m·∫∑c ƒë·ªãnh
                      form.setFieldsValue({
                        payment_method: 'cash',
                        transaction_date: dayjs(),
                        entity_id: undefined,
                        amount: undefined,
                        description: ''
                      });
                    }}
                  >
                    Ghi nh·∫≠n thanh to√°n
                  </Button>
                }
              >
                <Table
                  columns={customerColumns}
                  dataSource={customerDebts}
                  loading={loading}
                  rowKey="id"
                  pagination={{
                    showSizeChanger: true,
                    showQuickJumper: true,
                    showTotal: (total, range) =>
                      `${range[0]}-${range[1]} c·ªßa ${total} kh√°ch h√†ng`,
                  }}
                />
              </Card>
            </Col>
            <Col span={9}>
              <Card
                title="L·ªãch s·ª≠ thu n·ª£ kh√°ch h√†ng"
                bordered={true}
                style={{ minHeight: 400 }}
              >
                <Table
                  columns={customerHistoryColumns}
                  dataSource={customerTransactions}
                  rowKey="id"
                  size="small"
                  pagination={{ pageSize: 8 }}
                  locale={{ emptyText: 'Ch∆∞a c√≥ giao d·ªãch' }}
                />
              </Card>
            </Col>
          </Row>
        </TabPane>

        <TabPane
          tab={
            <span>
              <ShopOutlined />
              N·ª£ nh√† cung c·∫•p ({supplierDebts.length})
            </span>
          }
          key="suppliers"
        >
          <Row gutter={24}>
            <Col span={15}>
              <Card
                title="Danh s√°ch nh√† cung c·∫•p c√≥ n·ª£"
                extra={
                  <Button
                    type="primary"
                    icon={<PlusOutlined />}
                    onClick={() => {
                      setModalType('payment');
                      setActiveTab('suppliers');
                      setModalVisible(true);
                      // üÜï Reset form v·ªõi values m·∫∑c ƒë·ªãnh
                      form.setFieldsValue({
                        payment_method: 'cash',
                        transaction_date: dayjs(),
                        entity_id: undefined,
                        amount: undefined,
                        description: ''
                      });
                    }}
                  >
                    Ghi nh·∫≠n thanh to√°n
                  </Button>
                }
              >
                <Table
                  columns={supplierColumns}
                  dataSource={supplierDebts}
                  loading={loading}
                  rowKey="id"
                  pagination={{
                    showSizeChanger: true,
                    showQuickJumper: true,
                    showTotal: (total, range) =>
                      `${range[0]}-${range[1]} c·ªßa ${total} nh√† cung c·∫•p`,
                  }}
                />
              </Card>
            </Col>
            <Col span={9}>
              <Card
                title="L·ªãch s·ª≠ thanh to√°n n·ª£ nh√† cung c·∫•p"
                bordered={true}
                style={{ minHeight: 400 }}
              >
                <Table
                  columns={supplierHistoryColumns}
                  dataSource={supplierTransactions}
                  rowKey="id"
                  size="small"
                  pagination={{ pageSize: 8 }}
                  locale={{ emptyText: 'Ch∆∞a c√≥ giao d·ªãch' }}
                />
              </Card>
            </Col>
          </Row>
        </TabPane>
      </Tabs>

      {/* üÜï Enhanced Modal with Ant Design Form */}
      <DebtPaymentModal
        open={modalVisible}
        onClose={handleModalClose}
        onSubmit={handlePayDebt}
        activeTab={activeTab}
        modalType={modalType}
        form={form}
        customers={customers}
        suppliers={suppliers}
        submitting={submitting}
      />
    </div>
  );
};

export default DebtPage; 